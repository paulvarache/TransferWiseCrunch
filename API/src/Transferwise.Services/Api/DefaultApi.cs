/* 
 * Transferwise
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Transferwise.Services.Client;
using Transferwise.Services.Model;

namespace Transferwise.Services.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a specific transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Transfer</returns>
        Transfer GetTransferById (decimal transferId);

        /// <summary>
        /// Get a specific transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>ApiResponse of Transfer</returns>
        ApiResponse<Transfer> GetTransferByIdWithHttpInfo (decimal transferId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a specific transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Task of Transfer</returns>
        System.Threading.Tasks.Task<Transfer> GetTransferByIdAsync (decimal transferId);

        /// <summary>
        /// Get a specific transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Task of ApiResponse (Transfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transfer>> GetTransferByIdAsyncWithHttpInfo (decimal transferId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Transferwise.Services.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = Transferwise.Services.Client.Configuration.MergeConfigurations(
                Transferwise.Services.Client.GlobalConfiguration.Instance,
                new Transferwise.Services.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Transferwise.Services.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Transferwise.Services.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Transferwise.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Transferwise.Services.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Transferwise.Services.Client.Configuration.MergeConfigurations(
                Transferwise.Services.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Transferwise.Services.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Transferwise.Services.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Transferwise.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Transferwise.Services.Client.ISynchronousClient client,Transferwise.Services.Client.IAsynchronousClient asyncClient, Transferwise.Services.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Transferwise.Services.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Transferwise.Services.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Transferwise.Services.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Transferwise.Services.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Transferwise.Services.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a specific transfer 
        /// </summary>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Transfer</returns>
        public Transfer GetTransferById (decimal transferId)
        {
             Transferwise.Services.Client.ApiResponse<Transfer> localVarResponse = GetTransferByIdWithHttpInfo(transferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific transfer 
        /// </summary>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>ApiResponse of Transfer</returns>
        public Transferwise.Services.Client.ApiResponse< Transfer > GetTransferByIdWithHttpInfo (decimal transferId)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new Transferwise.Services.Client.ApiException(400, "Missing required parameter 'transferId' when calling DefaultApi->GetTransferById");

            Transferwise.Services.Client.RequestOptions localVarRequestOptions = new Transferwise.Services.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Transferwise.Services.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Transferwise.Services.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (transferId != null)
                localVarRequestOptions.PathParameters.Add("transferId", Transferwise.Services.Client.ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Transfer >("/transfers/{transferId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific transfer 
        /// </summary>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Task of Transfer</returns>
        public async System.Threading.Tasks.Task<Transfer> GetTransferByIdAsync (decimal transferId)
        {
             Transferwise.Services.Client.ApiResponse<Transfer> localVarResponse = await GetTransferByIdAsyncWithHttpInfo(transferId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific transfer 
        /// </summary>
        /// <exception cref="Transferwise.Services.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">The id of the transfer to retrieve</param>
        /// <returns>Task of ApiResponse (Transfer)</returns>
        public async System.Threading.Tasks.Task<Transferwise.Services.Client.ApiResponse<Transfer>> GetTransferByIdAsyncWithHttpInfo (decimal transferId)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new Transferwise.Services.Client.ApiException(400, "Missing required parameter 'transferId' when calling DefaultApi->GetTransferById");


            Transferwise.Services.Client.RequestOptions localVarRequestOptions = new Transferwise.Services.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (transferId != null)
                localVarRequestOptions.PathParameters.Add("transferId", Transferwise.Services.Client.ClientUtils.ParameterToString(transferId)); // path parameter

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Transfer>("/transfers/{transferId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransferById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
