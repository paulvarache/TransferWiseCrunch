/* 
 * Transferwise
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Transferwise.Services.Client.OpenAPIDateConverter;

namespace Transferwise.Services.Model
{
    /// <summary>
    /// StateChange
    /// </summary>
    [DataContract]
    public partial class StateChange :  IEquatable<StateChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StateChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateChange" /> class.
        /// </summary>
        /// <param name="currentState">currentState (required).</param>
        /// <param name="resource">resource (required).</param>
        /// <param name="occuredAt">occuredAt (required).</param>
        public StateChange(string currentState = default(string), Resource resource = default(Resource), DateTime occuredAt = default(DateTime))
        {
            // to ensure "currentState" is required (not null)
            if (currentState == null)
            {
                throw new InvalidDataException("currentState is a required property for StateChange and cannot be null");
            }
            else
            {
                this.CurrentState = currentState;
            }

            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for StateChange and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }

            // to ensure "occuredAt" is required (not null)
            if (occuredAt == null)
            {
                throw new InvalidDataException("occuredAt is a required property for StateChange and cannot be null");
            }
            else
            {
                this.OccuredAt = occuredAt;
            }

        }
        
        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name="current_state", EmitDefaultValue=false)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public Resource Resource { get; set; }

        /// <summary>
        /// Gets or Sets OccuredAt
        /// </summary>
        [DataMember(Name="occured_at", EmitDefaultValue=false)]
        public DateTime OccuredAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateChange {\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  OccuredAt: ").Append(OccuredAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StateChange);
        }

        /// <summary>
        /// Returns true if StateChange instances are equal
        /// </summary>
        /// <param name="input">Instance of StateChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateChange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentState == input.CurrentState ||
                    (this.CurrentState != null &&
                    this.CurrentState.Equals(input.CurrentState))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.OccuredAt == input.OccuredAt ||
                    (this.OccuredAt != null &&
                    this.OccuredAt.Equals(input.OccuredAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentState != null)
                    hashCode = hashCode * 59 + this.CurrentState.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.OccuredAt != null)
                    hashCode = hashCode * 59 + this.OccuredAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
