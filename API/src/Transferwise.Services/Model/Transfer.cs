/* 
 * Transferwise
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Transferwise.Services.Client.OpenAPIDateConverter;

namespace Transferwise.Services.Model
{
    /// <summary>
    /// Transfer
    /// </summary>
    [DataContract]
    public partial class Transfer :  IEquatable<Transfer>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 1,

            /// <summary>
            /// Enum Waitingrecipientinputtoproceed for value: waiting_recipient_input_to_proceed
            /// </summary>
            [EnumMember(Value = "waiting_recipient_input_to_proceed")]
            Waitingrecipientinputtoproceed = 2,

            /// <summary>
            /// Enum Incomingpaymentwaitin for value: incoming_payment_waitin
            /// </summary>
            [EnumMember(Value = "incoming_payment_waitin")]
            Incomingpaymentwaitin = 3

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="targetAccount">targetAccount (required).</param>
        /// <param name="sourceAccount">sourceAccount (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="reference">reference (required).</param>
        /// <param name="sourceValue">sourceValue (required).</param>
        /// <param name="sourceCurrency">sourceCurrency (required).</param>
        /// <param name="targetValue">targetValue (required).</param>
        /// <param name="targetCurrency">targetCurrency (required).</param>
        public Transfer(long id = default(long), long user = default(long), long targetAccount = default(long), long? sourceAccount = default(long?), StatusEnum status = default(StatusEnum), string reference = default(string), decimal sourceValue = default(decimal), string sourceCurrency = default(string), decimal targetValue = default(decimal), string targetCurrency = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Transfer and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for Transfer and cannot be null");
            }
            else
            {
                this.User = user;
            }

            // to ensure "targetAccount" is required (not null)
            if (targetAccount == null)
            {
                throw new InvalidDataException("targetAccount is a required property for Transfer and cannot be null");
            }
            else
            {
                this.TargetAccount = targetAccount;
            }

            this.SourceAccount = sourceAccount;
            this.Status = status;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for Transfer and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }

            // to ensure "sourceValue" is required (not null)
            if (sourceValue == null)
            {
                throw new InvalidDataException("sourceValue is a required property for Transfer and cannot be null");
            }
            else
            {
                this.SourceValue = sourceValue;
            }

            // to ensure "sourceCurrency" is required (not null)
            if (sourceCurrency == null)
            {
                throw new InvalidDataException("sourceCurrency is a required property for Transfer and cannot be null");
            }
            else
            {
                this.SourceCurrency = sourceCurrency;
            }

            // to ensure "targetValue" is required (not null)
            if (targetValue == null)
            {
                throw new InvalidDataException("targetValue is a required property for Transfer and cannot be null");
            }
            else
            {
                this.TargetValue = targetValue;
            }

            // to ensure "targetCurrency" is required (not null)
            if (targetCurrency == null)
            {
                throw new InvalidDataException("targetCurrency is a required property for Transfer and cannot be null");
            }
            else
            {
                this.TargetCurrency = targetCurrency;
            }

        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public long User { get; set; }

        /// <summary>
        /// Gets or Sets TargetAccount
        /// </summary>
        [DataMember(Name="targetAccount", EmitDefaultValue=false)]
        public long TargetAccount { get; set; }

        /// <summary>
        /// Gets or Sets SourceAccount
        /// </summary>
        [DataMember(Name="sourceAccount", EmitDefaultValue=true)]
        public long? SourceAccount { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets SourceValue
        /// </summary>
        [DataMember(Name="sourceValue", EmitDefaultValue=false)]
        public decimal SourceValue { get; set; }

        /// <summary>
        /// Gets or Sets SourceCurrency
        /// </summary>
        [DataMember(Name="sourceCurrency", EmitDefaultValue=false)]
        public string SourceCurrency { get; set; }

        /// <summary>
        /// Gets or Sets TargetValue
        /// </summary>
        [DataMember(Name="targetValue", EmitDefaultValue=false)]
        public decimal TargetValue { get; set; }

        /// <summary>
        /// Gets or Sets TargetCurrency
        /// </summary>
        [DataMember(Name="targetCurrency", EmitDefaultValue=false)]
        public string TargetCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TargetAccount: ").Append(TargetAccount).Append("\n");
            sb.Append("  SourceAccount: ").Append(SourceAccount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SourceValue: ").Append(SourceValue).Append("\n");
            sb.Append("  SourceCurrency: ").Append(SourceCurrency).Append("\n");
            sb.Append("  TargetValue: ").Append(TargetValue).Append("\n");
            sb.Append("  TargetCurrency: ").Append(TargetCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transfer);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="input">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.User == input.User ||
                    this.User.Equals(input.User)
                ) && 
                (
                    this.TargetAccount == input.TargetAccount ||
                    this.TargetAccount.Equals(input.TargetAccount)
                ) && 
                (
                    this.SourceAccount == input.SourceAccount ||
                    (this.SourceAccount != null &&
                    this.SourceAccount.Equals(input.SourceAccount))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.SourceValue == input.SourceValue ||
                    this.SourceValue.Equals(input.SourceValue)
                ) && 
                (
                    this.SourceCurrency == input.SourceCurrency ||
                    (this.SourceCurrency != null &&
                    this.SourceCurrency.Equals(input.SourceCurrency))
                ) && 
                (
                    this.TargetValue == input.TargetValue ||
                    this.TargetValue.Equals(input.TargetValue)
                ) && 
                (
                    this.TargetCurrency == input.TargetCurrency ||
                    (this.TargetCurrency != null &&
                    this.TargetCurrency.Equals(input.TargetCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.User.GetHashCode();
                hashCode = hashCode * 59 + this.TargetAccount.GetHashCode();
                if (this.SourceAccount != null)
                    hashCode = hashCode * 59 + this.SourceAccount.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                hashCode = hashCode * 59 + this.SourceValue.GetHashCode();
                if (this.SourceCurrency != null)
                    hashCode = hashCode * 59 + this.SourceCurrency.GetHashCode();
                hashCode = hashCode * 59 + this.TargetValue.GetHashCode();
                if (this.TargetCurrency != null)
                    hashCode = hashCode * 59 + this.TargetCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
